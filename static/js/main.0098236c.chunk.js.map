{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","j","this","squares","gameBoard","matrix","length","row","items","push","renderSquare","React","Component","Game","state","isLoaded","error","createdTime","finishedTime","status","fieldBoard","markerCounter","markerText","history","Array","fill","stepNumber","fetch","method","headers","Accept","then","res","json","result","setState","created_time","field_board","game_board","slice","calculateStatus","fieldCell","getNextVal","text","newMarkerCounter","resultMessage","updateMarker","handleClick","isComplete","rowGame","rowField","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0098236c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// squares is a matrix\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i, j) {\n    return (\n      <Square\n        value={this.props.squares[i][j]}\n        onClick={() => this.props.onClick(i,j)}\n      />\n    );\n  }\n\n  render() {\n    const gameBoard = this.props.squares;\n    const matrix = [];\n\n    for (let i = 0; i < gameBoard.length; i++) {\n      const row = gameBoard[i];\n      const items = [];\n      \n      for (let j = 0; j < row.length; j++) {\n        items.push(this.renderSquare(i,j))\n      };\n      \n      matrix.push(<div className=\"board-row\">{items}</div>);\n    };\n    return (\n      <div>\n        {matrix}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      error: null,\n      createdTime: null,\n      finishedTime: null,\n      status: null,\n      fieldBoard: [],\n      gameBoard: [],\n      markerCounter: 1,\n      markerText: 'Discover',\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0,\n    };\n  }\n  \n  componentDidMount() {\n    fetch(\"https://minesweeperdemo.herokuapp.com/games/\", {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      // body: JSON.stringify({\n      //   firstParam: 'yourValue',\n      //   secondParam: 'yourOtherValue'\n      // })\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            createdTime: result.created_time,\n            status:result.status,\n            fieldBoard: result.field_board,\n            gameBoard: result.game_board,\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  handleClick(i,j) {\n    const gameBoard = this.state.gameBoard;\n    const fieldBoard = this.state.fieldBoard.slice();\n    const markerCounter = this.state.markerCounter;\n    const squares = gameBoard.slice();\n    let status;\n    status = calculateStatus(fieldBoard, squares);\n    \n    if (status != 'started' || squares[i][j] == 'x' || squares[i][j] == 'm') {\n      return;\n    }\n\n    squares[i][j] = getNextVal(fieldBoard[i][j], markerCounter);\n    this.setState({\n      gameBoard: squares,\n    });\n  }\n\n  updateMarker() {\n    const newMarkerCounter = (this.state.markerCounter + 1) % 3;\n    let text;\n    if (newMarkerCounter == 1) {\n      text = 'Discover';\n    } else if (newMarkerCounter == 2) {\n      text = 'Flag';\n    } else {\n      text = 'Question';\n    }\n    this.setState({\n      markerCounter: newMarkerCounter,\n      markerText: text,\n    });\n  }\n\n  render() {\n    const gameBoard = this.state.gameBoard.slice();\n    const fieldBoard = this.state.fieldBoard.slice();\n    const markerText = this.state.markerText;\n    const status = calculateStatus(fieldBoard, gameBoard);\n\n    let resultMessage;\n    if (status == 'started') {\n      resultMessage = 'You are doing great!';\n    } else if (status == 'won') {\n      resultMessage = 'You won!!';\n    } else {\n      resultMessage = 'You lost! :(';\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <div className=\"game-info\">\n            <div>{resultMessage}</div>\n            <div>\n              <button onClick={() => this.updateMarker()}>{markerText}</button>\n            </div>\n          </div>\n          <Board\n            squares={this.state.gameBoard}\n            onClick={(i,j) => this.handleClick(i,j)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateStatus(fieldBoard, gameBoard) {\n  let isComplete;\n  isComplete = true;\n  for (let i = 0; i < gameBoard.length; i++) {\n    const rowGame = gameBoard[i];\n    const rowField = fieldBoard[i];\n    \n    for (let j = 0; j < rowGame.length; j++) {\n      if (rowGame[j] == 'm') {\n        return 'lost';\n      }\n      if (rowField[j] == '' && rowGame[j] != 'x') {\n        isComplete = false;\n      }\n    };\n    \n  };\n  if (isComplete) {\n    return 'won';\n  } else {\n    return 'started';\n  }\n}\n\nfunction getNextVal(fieldCell, markerCounter) {\n  if (markerCounter == 1) {\n    return fieldCell == '' ? 'x' : 'm';\n  } else if (markerCounter == 2) {\n    return 'f';\n  } else {\n    return '?';\n  }\n}\n\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n  "],"sourceRoot":""}